import warnings

with warnings.catch_warnings():
    warnings.filterwarnings("ignore",category=DeprecationWarning)

    from mido import MidiFile
    import time


def parse_key(key):

    if 'm' in key:
        return key.replace("m", ":min")

    else:
        return key + ":maj"


# takes vocal track alone
def parse_midi_track(inputPath):

    vocalTrack = MidiFile(inputPath)

    vocal_data = vocalTrack.tracks[0]
    key_signature = None

    for msg in vocal_data:

        if msg.type == 'key_signature':
            key_signature = parse_key(msg.key)

    time_stamps = {}
    time_stamps[0] = [0, 0]
    start_time = 0
    global_start = time.time()
    current_note = None

    for msg in vocalTrack:

        if msg.type == 'note_on':

            current_note = msg.note
            start_time = time.time()

        time.sleep(msg.time)

        if msg.type == 'note_off':

            end_time = time.time()
            elapsed_time = end_time - start_time
            contextual_stamp = start_time - global_start
            note_data = [elapsed_time, current_note]
            time_stamps[contextual_stamp] = note_data

    total_time_end = time.time()
    end_of_track = total_time_end - global_start
    time_stamps[end_of_track] = [0, 0]

    return time_stamps, key_signature


def bypass_parse(sample):

    if sample == 1:

        data = {0: [0, 0], 14.24962306022644: [0.9000430107116699, 73], 15.149805068969727: [1.802419900894165, 76],
                16.952346086502075: [0.4530198574066162, 73], 17.40549612045288: [0.441648006439209, 73],
                17.847278118133545: [0.44969797134399414, 66], 18.29713201522827: [0.22556591033935547, 66],
                18.522847175598145: [0.4417569637298584, 69], 18.964756965637207: [0.6590020656585693, 73],
                19.624006032943726: [0.4472949504852295, 69], 20.07146692276001: [0.4453439712524414, 69],
                20.51698088645935: [0.23603606224060059, 66], 20.75321102142334: [0.46040821075439453, 68],
                21.213890075683594: [0.2262709140777588, 66], 21.440365076065063: [0.8955039978027344, 73],
                22.335976123809814: [0.45737695693969727, 76], 22.793547868728638: [1.7887921333312988, 66],
                24.58258605003357: [0.4417238235473633, 73], 25.024641036987305: [0.45864009857177734, 66],
                25.48364782333374: [0.22324204444885254, 66], 25.707124948501587: [0.43872928619384766, 69],
                26.146071910858154: [0.658804178237915, 73], 26.805100917816162: [0.4496171474456787, 69],
                27.255043029785156: [0.44872117042541504, 69], 27.70407223701477: [0.23657965660095215, 69],
                27.940792083740234: [0.4569249153137207, 68], 28.39820408821106: [0.22242474555969238, 66],
                50.25315284729004: [0, 0]}

        key = 'A:maj'

        return data, key

    if sample == 2:

        data = {0: [0, 0], 39.0: [0.8, 74], 39.8: [0.4, 71], 40.2: [0.25, 76],
                43.0: [0.8, 74], 43.8: [0.65, 76], 44.45: [1.25, 71],

                46.5: [0.8, 74], 47.3: [0.4, 71], 47.7: [0.25, 76],
                50.5: [0.8, 74], 51.3: [0.65, 76], 51.95: [1.25, 71],

                85.0: [0.8, 74], 85.8: [0.4, 71], 86.2: [0.25, 76],
                89.0: [0.8, 74], 89.8: [0.65, 76], 90.45: [1.25, 71],

                92.5: [0.8, 74], 93.3: [0.4, 71], 93.7: [0.25, 76],
                96.5: [0.8, 74], 97.3: [0.65, 76], 97.95: [1.25, 71],

                112.8: [0.8, 74], 113.6: [0.65, 76], 114.25: [1.25, 71],

                115.5: [0.8, 74], 116.3: [0.4, 71], 116.7: [0.25, 76],
                119.5: [0.8, 74], 120.3: [0.65, 76], 120.95: [1.25, 71],

                123.0: [0.8, 74], 123.8: [0.4, 71], 124.2: [0.25, 76],
                127.0: [0.8, 74], 127.8: [0.65, 76], 128.45: [1.25, 71],

                129.7: [0.8, 74], 130.5: [0.65, 76], 131.15: [1.25, 71]}

        key = "C:maj"

        return data, key
